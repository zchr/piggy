{"version":3,"sources":["app/hooks.ts","accounts/reducers/AccountReducer.ts","accounts/components/AddInvestment.tsx","core/components/Graph.tsx","accounts/components/InvestmentList.tsx","accounts/components/AccountCard.tsx","accounts/components/AccountList.tsx","accounts/components/AddAccount.tsx","firebase/auth.ts","firebase/AuthModal.tsx","accounts/components/Nav.tsx","accounts/components/Overview.tsx","App.tsx","counter/counterAPI.ts","counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","accounts","JSON","parse","localStorage","getItem","saveLocally","accountSlice","createSlice","name","reducers","setState","state","action","payload","setSaveLocally","addAccount","accountMetadata","investments","push","addInvestment","accountId","investment","sort","a","b","date","deleteInvestment","investmentId","splice","actions","AddInvestment","props","dispatch","isAddingInvestment","setIsAddingInvestment","useState","Date","toISOString","split","investmentDate","setInvestmentDate","cashAdded","setCashAdded","totalValue","setTotalValue","isFirstInvestment","selector","account","length","Modal","show","onHide","Header","Title","Button","variant","onClick","Body","Form","Group","className","Label","Control","type","value","onChange","e","raw","target","newValue","parseFloat","isNaN","Text","Footer","preventDefault","getTime","disabled","Graph","title","data","lines","colors","keyNameMapping","LineChart","width","height","XAxis","dataKey","domain","tickFormatter","toLocaleDateString","Tooltip","cursor","labelFormatter","wrapperStyle","zIndex","YAxis","map","l","i","Line","stroke","InvestmentList","totalTwr","_","current","previousTotalValue","twr","reduce","prev","curr","daysOfAccount","annualizedTwr","previous","Card","toFixed","Table","striped","bordered","hover","size","AccountCard","setIsShowingAccountDetails","isShowingAccountDetails","undefined","description","AccountList","connect","setAccountId","lastInvestments","isCash","AddAccount","isAddingAccount","setIsAddingAccount","setName","setDescription","setIsCash","placeholder","as","Check","label","checked","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","AuthModal","email","setEmail","password","setPassword","isCreatingAccount","setIsCreatingAccount","error","setError","header","Alert","auth","createUserWithEmailAndPassword","signInWithEmailAndPassword","then","userCredential","catch","message","Nav","user","isAuthenticating","setIsAuthenticating","useEffect","firestore","collection","doc","set","setItem","stringify","Navbar","bg","expand","Container","signOut","Overview","filter","concat","yearsOfAccount","cashAccounts","cashInvestments","cash","App","setUser","hasAccounts","onSnapshot","d","exists","metadata","hasPendingWrites","onAuthStateChanged","uid","alt","src","window","location","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","store","configureStore","reducer","counter","counterReducer","AccountReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.1d97d42f.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport interface AccountState {\n    accounts: AccountMetadataState[];\n    saveLocally: boolean;\n}\n\nexport interface InvestmentState {\n    date: number;\n    cashAdded: number;\n    totalValue: number;\n}\n\nexport interface AccountMetadataState {\n    name: string;\n    description: string | undefined;\n    isCash: boolean;\n    investments: InvestmentState[];\n}\n\nconst initialState: AccountState = {\n    accounts: JSON.parse(localStorage.getItem('accounts') || '[]'),\n    saveLocally: true,\n}\n\nconst accountSlice = createSlice({\n    name: 'account',\n    initialState,\n    reducers: {\n        setState: (state, action: { payload: { state: AccountState } }) => {\n            state.accounts = action.payload.state.accounts\n        },\n        setSaveLocally: (state, action: { payload: { saveLocally: boolean } }) => {\n            state.saveLocally = action.payload.saveLocally;\n        },\n        addAccount: (state, action: { payload: { name: string, description: string | undefined, isCash: boolean } }) => {\n            const accountMetadata = {\n                ...action.payload,\n                investments: []\n            }\n            state.accounts.push(accountMetadata)\n        },\n        addInvestment: (state, action: { payload: { accountId: number, investment: InvestmentState } }) => {\n            const { accountId, investment } = action.payload;\n            const investments = state.accounts[accountId].investments;\n\n            investments.push(investment);\n            investments.sort((a, b) => a.date - b.date);\n\n            state.accounts[accountId].investments = investments;\n        },\n        deleteInvestment: (state, action: { payload: { accountId: number, investmentId: number } }) => {\n            const { accountId, investmentId } = action.payload;\n            state.accounts[accountId].investments.splice(investmentId, 1);\n        }\n    }\n});\n\nexport const { setState, setSaveLocally, addAccount, addInvestment, deleteInvestment } = accountSlice.actions;\n\nexport default accountSlice.reducer;","import React, { useState } from 'react';\nimport { Form, Modal } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport { useAppDispatch, useAppSelector as selector } from '../../app/hooks';\nimport { addInvestment } from '../reducers/AccountReducer';\n\ninterface Props {\n\taccountId: number;\n\tisAddingInvestment: boolean;\n\tsetIsAddingInvestment: () => void;\n}\n\nexport const AddInvestment = (props: Props) => {\n\tconst dispatch = useAppDispatch();\n\n\tconst { accountId, isAddingInvestment, setIsAddingInvestment } = props;\n\tconst [investmentDate, setInvestmentDate] = useState<string>(\n\t\tnew Date().toISOString().split('T')[0]\n\t);\n\tconst [cashAdded, setCashAdded] = useState<number | null>(null);\n\tconst [totalValue, setTotalValue] = useState<number | null>(null);\n\n\tconst isFirstInvestment = selector(\n\t\tstate => state.account.accounts[accountId].investments.length === 0\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Modal show={isAddingInvestment} onHide={setIsAddingInvestment}>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<Modal.Title>Add investment</Modal.Title>\n\t\t\t\t\t<Button variant='link' onClick={setIsAddingInvestment}>\n\t\t\t\t\t\tClose\n\t\t\t\t\t</Button>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<Form.Group className='mb-3'>\n\t\t\t\t\t\t\t<Form.Label>Investment date</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype='date'\n\t\t\t\t\t\t\t\tvalue={investmentDate}\n\t\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\t\tconst raw = e.target.value;\n\n\t\t\t\t\t\t\t\t\tsetInvestmentDate(raw);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t<Form.Group className='mb-3'>\n\t\t\t\t\t\t\t<Form.Label>Cash added</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tvalue={cashAdded === null ? '' : cashAdded}\n\t\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\t\tconst raw = e.target.value;\n\n\t\t\t\t\t\t\t\t\tif (raw !== '') {\n\t\t\t\t\t\t\t\t\t\tconst newValue = parseFloat(e.target.value);\n\t\t\t\t\t\t\t\t\t\tif (!isNaN(newValue)) {\n\t\t\t\t\t\t\t\t\t\t\tsetCashAdded(newValue);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsetCashAdded(null);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Form.Text className='text-muted'>\n\t\t\t\t\t\t\t\t{isFirstInvestment\n\t\t\t\t\t\t\t\t\t? 'If you know (roughly) the total amount of cash that you have added in the lifetime of your account, you may enter it here. Otherwise, enter the total account value in both of these boxes.'\n\t\t\t\t\t\t\t\t\t: 'The amount of cash that you added to this account since the last investment that you recorded'}\n\t\t\t\t\t\t\t</Form.Text>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t<Form.Group className='mb-3'>\n\t\t\t\t\t\t\t<Form.Label>New total value</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\tvalue={totalValue === null ? '' : totalValue}\n\t\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\t\tconst raw = e.target.value;\n\n\t\t\t\t\t\t\t\t\tif (raw !== '') {\n\t\t\t\t\t\t\t\t\t\tconst newValue = parseFloat(e.target.value);\n\t\t\t\t\t\t\t\t\t\tif (!isNaN(newValue)) {\n\t\t\t\t\t\t\t\t\t\t\tsetTotalValue(newValue);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsetTotalValue(null);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Form.Text className='text-muted'>\n\t\t\t\t\t\t\t\tThe new total value of your account (including the cash that you\n\t\t\t\t\t\t\t\thave recently added)\n\t\t\t\t\t\t\t</Form.Text>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t</Form>\n\t\t\t\t</Modal.Body>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<Button variant='outline-secondary' onClick={setIsAddingInvestment}>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant='primary'\n\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\taddInvestment({\n\t\t\t\t\t\t\t\t\taccountId,\n\t\t\t\t\t\t\t\t\tinvestment: {\n\t\t\t\t\t\t\t\t\t\tdate: new Date(investmentDate).getTime(),\n\t\t\t\t\t\t\t\t\t\tcashAdded: cashAdded!,\n\t\t\t\t\t\t\t\t\t\ttotalValue: totalValue!,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tsetIsAddingInvestment();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={cashAdded === null || totalValue === null}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</>\n\t);\n};\n","import React from 'react';\nimport { LineChart, XAxis, YAxis, Line, Tooltip } from 'recharts';\n\ninterface Props {\n\ttitle?: string;\n\tdata: any;\n\tlines: string[];\n}\n\nexport const Graph = (props: Props) => {\n\tconst { title, data, lines } = props;\n\tconst colors = ['#8884d8', '#82ca9d'];\n\n\tconst keyNameMapping: { [key: string]: string } = {\n\t\ttotalValue: 'Total value',\n\t\tcashAdded: 'Cash added',\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{title && <h4>{title}</h4>}\n\t\t\t<LineChart\n\t\t\t\twidth={700}\n\t\t\t\theight={300}\n\t\t\t\tdata={data}\n\t\t\t\tclassName='mb-3 graph-wrapper'\n\t\t\t>\n\t\t\t\t<XAxis\n\t\t\t\t\tdataKey='date'\n\t\t\t\t\ttype='number'\n\t\t\t\t\tdomain={['0', 'dataMax']}\n\t\t\t\t\ttickFormatter={date => new Date(date).toLocaleDateString()}\n\t\t\t\t/>\n\t\t\t\t<Tooltip\n\t\t\t\t\tcursor={false}\n\t\t\t\t\tlabelFormatter={date => new Date(date).toLocaleDateString()}\n\t\t\t\t\twrapperStyle={{ zIndex: 10000 }}\n\t\t\t\t/>\n\t\t\t\t<YAxis />\n\t\t\t\t{lines.map((l, i) => (\n\t\t\t\t\t<Line\n\t\t\t\t\t\tkey={l}\n\t\t\t\t\t\ttype='monotone'\n\t\t\t\t\t\tdataKey={l}\n\t\t\t\t\t\tstroke={colors[i]}\n\t\t\t\t\t\tname={keyNameMapping[l]}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</LineChart>\n\t\t</>\n\t);\n};\n","import React from 'react';\nimport { Button, Card, Table } from 'react-bootstrap';\nimport { useAppSelector as useSelector } from '../../app/hooks';\nimport { deleteInvestment } from '../reducers/AccountReducer';\nimport { useAppDispatch } from '../../app/hooks';\nimport { Graph } from '../../core/components/Graph';\n\ninterface Props {\n\taccountId: number;\n}\n\nexport const InvestmentList = (props: Props) => {\n\tconst dispatch = useAppDispatch();\n\n\tconst { accountId } = props;\n\n\tconst investments = useSelector(\n\t\tstate => state.account.accounts[accountId].investments\n\t);\n\n\tconst twr = (investmentId: number) => {\n\t\tconst current = investments[investmentId];\n\t\tconst previousTotalValue =\n\t\t\tinvestmentId === 0 ? 0 : investments[investmentId - 1].totalValue;\n\n\t\treturn (\n\t\t\t1 +\n\t\t\t(current.totalValue - previousTotalValue - current.cashAdded) /\n\t\t\t\t(previousTotalValue + current.cashAdded)\n\t\t);\n\t};\n\n\tconst twrs = investments.map((_, i) => twr(i));\n\tconst totalTwr = twrs.reduce((prev, curr) => prev * curr, 1) - 1;\n\tconst data = investments.map(i => {\n\t\treturn {\n\t\t\tdate: i.date,\n\t\t\tcashAdded: i.cashAdded,\n\t\t\ttotalValue: i.totalValue,\n\t\t};\n\t});\n\n\tconst daysOfAccount =\n\t\tdata.length > 0\n\t\t\t? (data[data.length - 1].date - data[0].date) / (24 * 60 * 60 * 1000)\n\t\t\t: 365;\n\tconst annualizedTwr =\n\t\tdaysOfAccount < 365\n\t\t\t? totalTwr\n\t\t\t: (1 + totalTwr) ** (365.0 / daysOfAccount) - 1;\n\n\t// Run back through the investments to calculate cumulative cash added\n\tfor (let i = 1; i < investments.length; i++) {\n\t\tconst current = data[i];\n\t\tconst previous = data[i - 1];\n\n\t\tcurrent.cashAdded += previous.cashAdded;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className='row'>\n\t\t\t\t<div className='mb-3 col-sm-6'>\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t<div>Time-weighted return</div>\n\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h1>{(totalTwr * 100).toFixed(2)}%</h1>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</div>\n\t\t\t\t<div className='mb-3 col-sm-6'>\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t<div>Annualized return</div>\n\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h1>{(annualizedTwr * 100).toFixed(2)}%</h1>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Graph data={data} lines={['cashAdded', 'totalValue']} />\n\t\t\t<Table striped bordered hover size='sm'>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Date</th>\n\t\t\t\t\t\t<th>Cash added</th>\n\t\t\t\t\t\t<th>Account value</th>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{investments.map((investment, i) => (\n\t\t\t\t\t\t<tr key={`investment-${accountId}-${i}`}>\n\t\t\t\t\t\t\t<td>{new Date(investment.date).toLocaleDateString()}</td>\n\t\t\t\t\t\t\t<td>${investment.cashAdded}</td>\n\t\t\t\t\t\t\t<td>${investment.totalValue}</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\tdispatch(deleteInvestment({ accountId, investmentId: i }))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvariant='outline-danger'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t</Table>\n\t\t</>\n\t);\n};\n","import React, { useState } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport { AccountMetadataState } from '../reducers/AccountReducer';\nimport { AddInvestment } from './AddInvestment';\nimport { InvestmentList } from './InvestmentList';\n\ninterface Props {\n\taccountId: number | undefined;\n\taccount: AccountMetadataState | undefined;\n\tsetIsShowingAccountDetails: () => void;\n}\n\nexport const AccountCard = (props: Props) => {\n\tconst { accountId, account, setIsShowingAccountDetails } = props;\n\n\tconst [isAddingInvestment, setIsAddingInvestment] = useState<boolean>(false);\n\n\tconst isShowingAccountDetails = accountId !== undefined;\n\n\treturn account === undefined || accountId === undefined ? (\n\t\t<></>\n\t) : (\n\t\t<>\n\t\t\t<Modal show={isShowingAccountDetails} onHide={setIsShowingAccountDetails}>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<Modal.Title>{account.name}</Modal.Title>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant='outline-success'\n\t\t\t\t\t\tonClick={() => setIsAddingInvestment(true)}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd investment\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant='link' onClick={setIsShowingAccountDetails}>\n\t\t\t\t\t\tClose\n\t\t\t\t\t</Button>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<p>{account.description}</p>\n\t\t\t\t\t<InvestmentList accountId={accountId!} />\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t\t<AddInvestment\n\t\t\t\taccountId={accountId}\n\t\t\t\tisAddingInvestment={isAddingInvestment}\n\t\t\t\tsetIsAddingInvestment={() => setIsAddingInvestment(false)}\n\t\t\t/>\n\t\t</>\n\t);\n};\n","import React, { useState } from 'react';\nimport { Button, Table } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { AccountMetadataState } from '../reducers/AccountReducer';\nimport { AccountCard } from './AccountCard';\nimport { AddInvestment } from './AddInvestment';\n\ninterface Props extends StateProps {}\n\ninterface StateProps {\n\taccounts: AccountMetadataState[];\n}\n\nconst AccountListInternal = (props: Props) => {\n\tconst { accounts } = props;\n\n\tconst [accountId, setAccountId] = useState<number | undefined>(undefined);\n\tconst [isAddingInvestment, setIsAddingInvestment] = useState<boolean>(false);\n\n\tconst lastInvestments = accounts.map((a) =>\n\t\ta.investments.length === 0\n\t\t\t? undefined\n\t\t\t: a.investments[a.investments.length - 1]\n\t);\n\n\tconst getLastInvestmentDate = (date: number | undefined): string =>\n\t\tdate === undefined ? '' : new Date(date).toLocaleDateString();\n\n\treturn (\n\t\t<>\n\t\t\t<Table striped bordered hover size='sm'>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Account</th>\n\t\t\t\t\t\t<th>Type</th>\n\t\t\t\t\t\t<th>Value</th>\n\t\t\t\t\t\t<th>Last update</th>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{accounts.map((account, i) => (\n\t\t\t\t\t\t<tr key={`account-${i}`}>\n\t\t\t\t\t\t\t<td>{account.name}</td>\n\t\t\t\t\t\t\t<td>{account.isCash ? 'Cash' : 'Brokerage'}</td>\n\t\t\t\t\t\t\t<td>${lastInvestments[i]?.totalValue}</td>\n\t\t\t\t\t\t\t<td>{getLastInvestmentDate(lastInvestments[i]?.date)}</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetAccountId(i);\n\t\t\t\t\t\t\t\t\t\tsetIsAddingInvestment(true);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tvariant='primary'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tUpdate\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName='mx-3'\n\t\t\t\t\t\t\t\t\tonClick={() => setAccountId(i)}\n\t\t\t\t\t\t\t\t\tvariant='outline-primary'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tDetails\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t</Table>\n\t\t\t{!isAddingInvestment && (\n\t\t\t\t<AccountCard\n\t\t\t\t\taccountId={accountId}\n\t\t\t\t\taccount={accountId === undefined ? undefined : accounts[accountId]}\n\t\t\t\t\tsetIsShowingAccountDetails={() => setAccountId(undefined)}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{accountId !== undefined && (\n\t\t\t\t<AddInvestment\n\t\t\t\t\taccountId={accountId}\n\t\t\t\t\tisAddingInvestment={isAddingInvestment}\n\t\t\t\t\tsetIsAddingInvestment={() => {\n\t\t\t\t\t\tsetIsAddingInvestment(false);\n\t\t\t\t\t\tsetAccountId(undefined);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nconst mapStateToProps = (state: RootState): StateProps => {\n\treturn {\n\t\taccounts: state.account.accounts,\n\t};\n};\n\nexport const AccountList = connect(mapStateToProps)(AccountListInternal);\n","import React, { useState } from 'react';\nimport { Form, Modal } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport { useAppDispatch } from '../../app/hooks';\nimport { addAccount } from '../reducers/AccountReducer';\n\ninterface Props {\n\tisAddingAccount: boolean;\n\tsetIsAddingAccount: () => void;\n}\n\nexport const AddAccount = (props: Props) => {\n\tconst { isAddingAccount, setIsAddingAccount } = props;\n\tconst [name, setName] = useState<string>('');\n\tconst [description, setDescription] = useState<string>('');\n\tconst [isCash, setIsCash] = useState<boolean>(false);\n\tconst dispatch = useAppDispatch();\n\n\treturn (\n\t\t<>\n\t\t\t<Modal show={isAddingAccount} onHide={setIsAddingAccount}>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<Modal.Title>Add account</Modal.Title>\n\t\t\t\t\t<Button variant='link' onClick={setIsAddingAccount}>\n\t\t\t\t\t\tClose\n\t\t\t\t\t</Button>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<Form.Group className='mb-3'>\n\t\t\t\t\t\t\t<Form.Label>Account name</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\tplaceholder='Robinhood cash account'\n\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\tonChange={e => setName(e.target.value)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t<Form.Group className='mb-3'>\n\t\t\t\t\t\t\t<Form.Label>Account description</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tas='textarea'\n\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\tplaceholder='Description'\n\t\t\t\t\t\t\t\tvalue={description}\n\t\t\t\t\t\t\t\tonChange={e => setDescription(e.target.value)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Form.Text className='text-muted'>\n\t\t\t\t\t\t\t\tOptionally include a description of how you use your account\n\t\t\t\t\t\t\t</Form.Text>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t<Form.Group className='mb-3'>\n\t\t\t\t\t\t\t<Form.Check\n\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\tlabel='This is a cash account'\n\t\t\t\t\t\t\t\tchecked={isCash}\n\t\t\t\t\t\t\t\tonChange={e => setIsCash(e.target.checked)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant='primary'\n\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\tsetName('');\n\t\t\t\t\t\t\t\tsetDescription('');\n\t\t\t\t\t\t\t\tdispatch(addAccount({ name, description, isCash }));\n\t\t\t\t\t\t\t\tsetIsAddingAccount();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tdisabled={name.length === 0}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Form>\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t</>\n\t);\n};\n","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyB9hM-oSWTc3oXreGPSN0e7T4vKV22xCG4\",\n    authDomain: \"piggy-17d8c.firebaseapp.com\",\n    projectId: \"piggy-17d8c\",\n    storageBucket: \"piggy-17d8c.appspot.com\",\n    messagingSenderId: \"469740290881\",\n    appId: \"1:469740290881:web:acdb15231211e3f29b17c0\",\n    measurementId: \"G-0F7S2MSP04\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { useState } from 'react';\nimport { Alert, Form, Modal } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport firebase from './auth';\n\ninterface Props {\n\tshow: boolean;\n\tonHide: () => void;\n}\n\nexport const AuthModal = (props: Props) => {\n\tconst { show, onHide } = props;\n\tconst [email, setEmail] = useState<string>('');\n\tconst [password, setPassword] = useState<string>('');\n\tconst [isCreatingAccount, setIsCreatingAccount] = useState<\n\t\tboolean | undefined\n\t>(undefined);\n\tconst [error, setError] = useState<string | undefined>(undefined);\n\n\tconst header = isCreatingAccount ? 'Sign up' : 'Sign in';\n\n\tconst signUpOrSignIn = () =>\n\t\tisCreatingAccount\n\t\t\t? firebase.auth().createUserWithEmailAndPassword(email, password)\n\t\t\t: firebase.auth().signInWithEmailAndPassword(email, password);\n\n\treturn (\n\t\t<>\n\t\t\t<Modal show={show} onHide={onHide}>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<Modal.Title>{header}</Modal.Title>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t{error && <Alert variant='danger'>{error}</Alert>}\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={() => setIsCreatingAccount(true)}\n\t\t\t\t\t\tvariant='link'\n\t\t\t\t\t\tdisabled={isCreatingAccount === true}\n\t\t\t\t\t>\n\t\t\t\t\t\tMake a new account\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={() => setIsCreatingAccount(false)}\n\t\t\t\t\t\tvariant='link'\n\t\t\t\t\t\tdisabled={isCreatingAccount === false}\n\t\t\t\t\t>\n\t\t\t\t\t\tSign into existing account\n\t\t\t\t\t</Button>\n\t\t\t\t\t{isCreatingAccount !== undefined && (\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<Form.Group className='mb-3'>\n\t\t\t\t\t\t\t\t<Form.Label>Email</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\t\t\t\tonChange={e => setEmail(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t<Form.Group className='mb-3'>\n\t\t\t\t\t\t\t\t<Form.Label>Password</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\t\t\t\tonChange={e => setPassword(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant='primary'\n\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\t\t\t\t\tsignUpOrSignIn()\n\t\t\t\t\t\t\t\t\t\t.then(userCredential => {\n\t\t\t\t\t\t\t\t\t\t\tsetEmail('');\n\t\t\t\t\t\t\t\t\t\t\tsetPassword('');\n\t\t\t\t\t\t\t\t\t\t\tonHide();\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\t\t\t\t\tsetError(error.message);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tdisabled={email.length === 0 || password.length === 0}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{header}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t)}\n\t\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t</>\n\t);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Navbar, Button, Container } from 'react-bootstrap';\nimport { useAppSelector as useSelector } from '../../app/hooks';\nimport { AddAccount } from './AddAccount';\nimport firebase from '../../firebase/auth';\nimport { AuthModal } from '../../firebase/AuthModal';\nimport { useAppDispatch } from '../../app/hooks';\nimport { setSaveLocally } from '../reducers/AccountReducer';\n\ninterface Props {\n\tuser: string | null;\n\tisAddingAccount: boolean;\n\tsetIsAddingAccount: (val: boolean) => void;\n}\n\nexport const Nav = (props: Props) => {\n\tconst { user, isAddingAccount, setIsAddingAccount } = props;\n\n\tconst [isAuthenticating, setIsAuthenticating] = useState<boolean>(false);\n\tconst dispatch = useAppDispatch();\n\n\tconst state = useSelector(state => state.account);\n\tconst saveLocally = useSelector(state => state.account.saveLocally);\n\n\tconst signOut = () => {\n\t\tfirebase\n\t\t\t.auth()\n\t\t\t.signOut()\n\t\t\t.then(() => dispatch(setSaveLocally({ saveLocally: true })));\n\t};\n\n\tuseEffect(() => {\n\t\tif (user && !saveLocally) {\n\t\t\tfirebase.firestore().collection('users').doc(user).set(state);\n\t\t} else if (saveLocally) {\n\t\t\tlocalStorage.setItem('accounts', JSON.stringify(state.accounts));\n\t\t}\n\t}, [saveLocally, user, state]);\n\n\treturn (\n\t\t<Navbar bg='light' expand='lg' className='mb-3'>\n\t\t\t<Container className='justify-content-between'>\n\t\t\t\t<Button variant='primary' onClick={() => setIsAddingAccount(true)}>\n\t\t\t\t\tTrack a new account\n\t\t\t\t</Button>\n\t\t\t\t<div>\n\t\t\t\t\t{user ? (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName='mx-3'\n\t\t\t\t\t\t\tonClick={signOut}\n\t\t\t\t\t\t\tvariant='outline-primary'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSign out\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName='mx-3'\n\t\t\t\t\t\t\tonClick={() => setIsAuthenticating(true)}\n\t\t\t\t\t\t\tvariant='outline-primary'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSign in\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t)}\n\t\t\t\t\t{user ? 'Syncing to your account' : 'Saving locally'}\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t\t<AuthModal\n\t\t\t\tshow={isAuthenticating}\n\t\t\t\tonHide={() => setIsAuthenticating(false)}\n\t\t\t/>\n\t\t\t<AddAccount\n\t\t\t\tisAddingAccount={isAddingAccount}\n\t\t\t\tsetIsAddingAccount={() => setIsAddingAccount(false)}\n\t\t\t/>\n\t\t</Navbar>\n\t);\n};\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useAppSelector as useSelector } from '../../app/hooks';\nimport { Graph } from '../../core/components/Graph';\nimport { InvestmentState } from '../reducers/AccountReducer';\n\nexport const Overview = () => {\n\tconst accounts = useSelector(state =>\n\t\tstate.account.accounts.filter(a => a.investments.length > 0)\n\t);\n\n\t// Calculate twr across all investment accounts\n\tconst investments = accounts\n\t\t.filter(a => !a.isCash)\n\t\t.reduce(\n\t\t\t(prev: InvestmentState[], curr) => prev.concat(curr.investments),\n\t\t\t[]\n\t\t)\n\t\t.sort((a, b) => a.date - b.date);\n\n\tconst twr = (investmentId: number) => {\n\t\tconst current = investments[investmentId];\n\t\tconst previousTotalValue =\n\t\t\tinvestmentId === 0 ? 0 : investments[investmentId - 1].totalValue;\n\n\t\treturn (\n\t\t\t1 +\n\t\t\t(current.totalValue - previousTotalValue - current.cashAdded) /\n\t\t\t\t(previousTotalValue + current.cashAdded)\n\t\t);\n\t};\n\n\tconst twrs = investments.map((_, i) => twr(i));\n\tconst totalTwr = twrs.reduce((prev, curr) => prev * curr, 1) - 1;\n\n\tconst data = investments.map(i => {\n\t\treturn {\n\t\t\tdate: i.date,\n\t\t\tcashAdded: i.cashAdded,\n\t\t\ttotalValue: i.totalValue,\n\t\t};\n\t});\n\n\tconst yearsOfAccount =\n\t\tdata.length > 0\n\t\t\t? (data[data.length - 1].date - data[0].date) /\n\t\t\t  (365 * 24 * 60 * 60 * 1000)\n\t\t\t: 0;\n\tconst annualizedTwr =\n\t\t(yearsOfAccount === 0\n\t\t\t? totalTwr\n\t\t\t: (1 + totalTwr) ** (1.0 / yearsOfAccount) - 1) * 100;\n\n\t// Run back through the investments to calculate cumulative cash added\n\tfor (let i = 1; i < investments.length; i++) {\n\t\tconst current = data[i];\n\t\tconst previous = data[i - 1];\n\n\t\tcurrent.cashAdded += previous.cashAdded;\n\t}\n\n\t// Calculate cash stats\n\tconst cashAccounts = accounts.filter(a => a.isCash);\n\n\tconst cashInvestments = cashAccounts\n\t\t.reduce(\n\t\t\t(prev: InvestmentState[], curr) => prev.concat(curr.investments),\n\t\t\t[]\n\t\t)\n\t\t.sort((a, b) => a.date - b.date);\n\n\tconst cash = cashAccounts\n\t\t.map(a =>\n\t\t\ta.investments.length > 0\n\t\t\t\t? a.investments[a.investments.length - 1].totalValue\n\t\t\t\t: 0\n\t\t)\n\t\t.reduce((prev, curr) => prev + curr, 0);\n\n\treturn (\n\t\t<>\n\t\t\t<div className='row'>\n\t\t\t\t<div className='mb-3 col-sm-4'>\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t<div>Time-weighted return</div>\n\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h1>{(totalTwr * 100).toFixed(2)}%</h1>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</div>\n\t\t\t\t<div className='mb-3 col-sm-4'>\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t<div>Annualized return</div>\n\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h1>{annualizedTwr.toFixed(2)}%</h1>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</div>\n\t\t\t\t<div className='mb-3 col-sm-4'>\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t<div>Cash on hand</div>\n\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h1>${cash}</h1>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='row'>\n\t\t\t\t<div className='col-sm-6'>\n\t\t\t\t\t{investments.length === 0 ? (\n\t\t\t\t\t\t<p>Add an investment to see metrics</p>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Graph\n\t\t\t\t\t\t\ttitle={'Brokerage'}\n\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\tlines={['cashAdded', 'totalValue']}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<div className='col-sm-6'>\n\t\t\t\t\t{cashInvestments.length === 0 ? (\n\t\t\t\t\t\t<p>Add data about a cash account to see metrics</p>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Graph\n\t\t\t\t\t\t\ttitle={'Cash'}\n\t\t\t\t\t\t\tdata={cashInvestments}\n\t\t\t\t\t\t\tlines={['totalValue']}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n","import React, { useState, useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { AccountList } from './accounts/components/AccountList';\nimport { Nav } from './accounts/components/Nav';\nimport { Overview } from './accounts/components/Overview';\nimport {\n\tsetState,\n\tAccountState,\n\tsetSaveLocally,\n} from './accounts/reducers/AccountReducer';\nimport { useAppDispatch, useAppSelector as useSelector } from './app/hooks';\nimport firebase from './firebase/auth';\n\nconst App = () => {\n\tconst [user, setUser] = useState<string | null>(null);\n\tconst [isAddingAccount, setIsAddingAccount] = useState<boolean>(false);\n\tconst hasAccounts = useSelector(state => state.account.accounts.length > 0);\n\n\tconst dispatch = useAppDispatch();\n\n\tuseEffect(() => {\n\t\tif (user) {\n\t\t\tdispatch(setSaveLocally({ saveLocally: false }));\n\n\t\t\t// see if they have any data--if so, map to state\n\t\t\tfirebase\n\t\t\t\t.firestore()\n\t\t\t\t.collection('users')\n\t\t\t\t.doc(user)\n\t\t\t\t.onSnapshot(d => {\n\t\t\t\t\tif (d.exists && !d.metadata.hasPendingWrites) {\n\t\t\t\t\t\tdispatch(setState({ state: d.data() as AccountState }));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t}, [user, dispatch]);\n\n\tfirebase.auth().onAuthStateChanged(user => {\n\t\tsetUser(user ? user.uid : null);\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<Nav\n\t\t\t\tuser={user}\n\t\t\t\tisAddingAccount={isAddingAccount}\n\t\t\t\tsetIsAddingAccount={setIsAddingAccount}\n\t\t\t/>\n\t\t\t<Container>\n\t\t\t\t{hasAccounts ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Overview />\n\t\t\t\t\t\t<AccountList />\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className='p-5 mb-4 bg-light rounded-3'>\n\t\t\t\t\t\t\t<div className='container-fluid py-5'>\n\t\t\t\t\t\t\t\t<h1 className='display-5 fw-bold'>Stay on top of your money</h1>\n\t\t\t\t\t\t\t\t<p className='col-md-8 fs-4'>\n\t\t\t\t\t\t\t\t\tPiggy gives you a bird's eye view of where your money is. Sync\n\t\t\t\t\t\t\t\t\tyour data to an account, or save it locally&mdash;right in\n\t\t\t\t\t\t\t\t\tyour browser.\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName='btn btn-primary btn-lg'\n\t\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\t\tonClick={() => setIsAddingAccount(true)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tAdd your first account\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row mb-4'>\n\t\t\t\t\t\t\t<div className='col-md-3'>\n\t\t\t\t\t\t\t\t<h2>See how your accounts perform</h2>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='col-md-9'>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\talt={'Overview panel with account statistics'}\n\t\t\t\t\t\t\t\t\tclassName='w-100'\n\t\t\t\t\t\t\t\t\tsrc={`${window.location}/overview.png`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\talt={'Graphs showing account performance overtime'}\n\t\t\t\t\t\t\t\t\tclassName='w-100'\n\t\t\t\t\t\t\t\t\tsrc={`${window.location}/graphs.png`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row align-items-md-stretch mb-4'>\n\t\t\t\t\t\t\t<div className='col-md-6'>\n\t\t\t\t\t\t\t\t<div className='h-100 p-5 text-white bg-dark rounded-3'>\n\t\t\t\t\t\t\t\t\t<h2>What we do</h2>\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\tPiggy helps you track your overall account balances and\n\t\t\t\t\t\t\t\t\t\tinvestment growth. We'll track how much cash you have and\n\t\t\t\t\t\t\t\t\t\tyour anualized / time-weighted returns\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName='btn btn-outline-light'\n\t\t\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\t\t\tonClick={() => setIsAddingAccount(true)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tGet started with Piggy\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='col-md-6'>\n\t\t\t\t\t\t\t\t<div className='h-100 p-5 bg-light border rounded-3'>\n\t\t\t\t\t\t\t\t\t<h2>We're not another Mint</h2>\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\tPiggy does not analyze individual transactions or\n\t\t\t\t\t\t\t\t\t\tcharacterize your spending habbits.\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport AccountReducer from '../accounts/reducers/AccountReducer';\nimport counterReducer from '../counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    account: AccountReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}